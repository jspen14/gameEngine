#include "ExploiterExpert.h"

ExploiterExpert::ExploiterExpert() {
    printf("incomplete ExploiterExpert constructor\n");
    potential = 0.0;
}

ExploiterExpert::ExploiterExpert(int _me, igNBS *_ignbs) {
    me = _me;
    t = 0;
    
    potential = 0.0;
    backup = new TriggerStrat(me, BULLIED1_V, _ignbs, false, 0.5);
    //upperBound = 1.0;
    //lowerBound = 0.0;
    targetDir = 0;
    targetInc = 0.05;
}

ExploiterExpert::~ExploiterExpert() {
    delete backup;
}

void ExploiterExpert::init(Game *_g) {}

void ExploiterExpert::Reset() {}

double ExploiterExpert::getPotential() {
    if (t != 0)
        return potential / t;
    else
        return potential;
}

void ExploiterExpert::selectAction(Game *_g) {
    g = _g;
    
    // infer the joint action we should play -- these will be overwridden if there's a proposal via cheap talk
    backup->selectAction(_g);
    //selectedAction = backup->selectedAction;
    backup->nbsExpected(_g, 1.0 / (1.0 + (t+0.01)/50.0));
    backup->bullyExpected(_g, me);

    ja[1-me] = backup->expectedActions[1-me];
    ja[me] = selectedAction = chooseTheBest(_g, ja[1-me]);
    
    projectedPayoff[0] = g->M[0][ja[0]][ja[1]];
    projectedPayoff[1] = g->M[1][ja[0]][ja[1]];
    
    //rand() % _g->A[me]; // select a random action for now
}

void ExploiterExpert::update(int acts[2], double payoffs[2], bool active) {
    t++;
    
    internalExpectationTally += projectedPayoff[me];
    
    potential += projectedPayoff[me];
    backup->update(acts, payoffs, active);
    
    if (acts[1-me] == ja[1-me]) {
        //    if he did what I expected him to do; do nothing
        printf("He acted as expected\n");
    }
    else {
        if (acts[1-me] == backup->nbsExpectedActions[1-me]) {
            //    if he tried to play fair, but I thought he should exploit, increase bullyWeight
            //double inc = 1.0 / (10.0 + t);
            //if (inc < 0.005)
            //    inc = 0.005;
            if (targetDir == 1)
                targetInc *= 1.1;
            else if (targetDir == 0) {
                targetInc /= 2.0;
            }
            targetDir = 1;
            if (targetInc > 0.05)
                targetInc = 0.05;

            backup->bullyWeight += targetInc;
            
            //lowerBound = (lowerBound + backup->bullyWeight) / 2.0;
            //backup->bullyWeight = (lowerBound + upperBound) / 2.0;
            printf("increase bullyWeight\n");
            
            if (backup->bullyWeight > 1.0)
                backup->bullyWeight = 1.0;
        }
        if (acts[1-me] == backup->bullyExpectedActions[1-me]) {
            //    if he tried to exploit, but I thought he should play fair, decrease bullyWeight
            //double inc = 1.0 / (10.0 + t);
            //if (inc < 0.005)
            //    inc = 0.005;

            //upperBound = (upperBound + backup->bullyWeight) / 2.0;
            //backup->bullyWeight = (lowerBound + upperBound) / 2.0;
            if (targetDir == -1)
                targetInc *= 1.1;
            else if (targetDir == 1) {
                targetInc /= 2.0;
            }
            targetDir = -1;
            if (targetInc > 0.05)
                targetInc = 0.05;

            backup->bullyWeight -= targetInc;
            
            printf("decrease bullyWeight\n");

            if (backup->bullyWeight < 0.0)
                backup->bullyWeight = 0.0;
        }
    }
    printf("bullyWeight = %lf (%lf)\n", backup->bullyWeight, targetInc);
    
    printf("exploitPotential: %lf\n", getPotential());
}

void ExploiterExpert::produceStartCheapTalk(char *buf) {
    strcpy(buf, "--\n");
}

void ExploiterExpert::processStartCheapTalk(char *buf) {
    if (buf[0] != '-') {
        // a joint action was proposed, so listen to it
        extractJointAction(buf);
        selectedAction = ja[me] = chooseTheBest(g, ja[1-me]);
    }
    else {
        // just use what I inferred previously; so nothing else to do for now
    }
}

void ExploiterExpert::extractJointAction(char *buf) {
    char cpy[1024];
    
    strcpy(cpy, buf);
    cpy[1] = '\0';
    ja[0] = atoi(cpy);
    
    strcpy(cpy, buf);
    cpy[2] = '\0';
    ja[1] = atoi(cpy+1);

    printf("Proposed joint action: %i%i\n", ja[0], ja[1]);
    
    projectedPayoff[0] = g->M[0][ja[0]][ja[1]];
    projectedPayoff[1] = g->M[1][ja[0]][ja[1]];
    
    //potential += projectedPayoff[me];
}

int ExploiterExpert::chooseTheBest(Game *_g, int act_other) {
    int myact = -1;
    double mejor = -99999;
    for (int i = 0; i < _g->A[me]; i++) {
        if (me == 0) {
            if (_g->M[me][i][act_other] > mejor) {
                myact = i;
                mejor = _g->M[me][i][act_other];
            }
        }
        else {
            if (_g->M[me][act_other][i] > mejor) {
                myact = i;
                mejor = _g->M[me][act_other][i];
            }
        }
    }
    
    return myact;
}

const char *ExploiterExpert::whoAmI() {
    return "ExploiterExpert";
}

bool ExploiterExpert::matchesPlan(int proposal[2]) {
    return false;
}
